import java.util.*;

public class Main {
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the number of elements
        System.out.println("Enter the number of elements in the Array of Elements:");
        int n = scanner.nextInt();

        // Read the array elements
        System.out.println("Enter the mystical array elements:");
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }

        // Find the length of the longest contiguous subarray
        int longestContiguousLength = findLongestContiguousSubarray(arr);
        
        // Print the results
        System.out.println("Behold! The length of the longest contiguous subarray is " + longestContiguousLength + ", a sign of the hidden power within.");
        System.out.println("The sacred array holds within it " + n + " elements, waiting to be deciphered.");

        scanner.close();
    }
    
    private static int findLongestContiguousSubarray(int[] arr) {
        int n = arr.length;
        int maxLength = 1;

        for (int i = 0; i < n - 1; i++) {
            // Create a set to store elements of the current subarray
            Set<Integer> elements = new HashSet<>();
            elements.add(arr[i]);

            int minElement = arr[i];
            int maxElement = arr[i];

            for (int j = i + 1; j < n; j++) {
                // If the element is already in the set, break the loop
                if (elements.contains(arr[j])) {
                    break;
                }

                // Add the current element to the set
                elements.add(arr[j]);

                // Update min and max elements of the current subarray
                minElement = Math.min(minElement, arr[j]);
                maxElement = Math.max(maxElement, arr[j]);

                // Check if the current subarray is contiguous
                if (maxElement - minElement == j - i) {
                    // Update the maximum length if needed
                    maxLength = Math.max(maxLength, j - i + 1);
                }
            }
        }

        return maxLength;
    }
}
